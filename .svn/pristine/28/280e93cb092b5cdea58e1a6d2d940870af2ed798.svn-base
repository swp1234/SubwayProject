package src;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;

public class MainServer implements Runnable {

	public static final int ServerPort = 5000;
	public static final String ServerIP = "127.0.0.1";
	static DBManager dbManager = new DBManager();
	static SubwayAPIManager subwayAPIManager = new SubwayAPIManager();

	@Override
	public void run() {

		try {
			System.out.println("S: Connecting...");
			ServerSocket serverSocket = new ServerSocket(ServerPort);

			while (true) {
				Socket client = serverSocket.accept();
				InetAddress clientInet = client.getInetAddress();
				int clientPort = client.getPort();
				String clientIp = clientInet.getHostAddress();
				System.out.println("NEW CLIENT CONNTECTED FROM IP : " + clientIp + "/" + clientPort + " ####### ");
				new DataProcessThread(client).start();
			}
		} catch (Exception e) {
			System.out.println("S: Error");
			e.printStackTrace();
		} finally {

		}

	}

	public static void main(String[] args) {
		Thread connectThread = new Thread(new MainServer());
		connectThread.start();
	}

	class DataProcessThread extends Thread {

		Socket client;

		DataProcessThread(Socket socket) {
			this.client = socket;
		}

		public void run() {
			try {
				ObjectOutputStream out = new ObjectOutputStream(client.getOutputStream());
				ObjectInputStream ois = new ObjectInputStream(client.getInputStream());
				String receivedJSONObj = (String) ois.readObject();
				JSONParser jsonParser = new JSONParser();
				JSONObject obj = (JSONObject) jsonParser.parse(receivedJSONObj);
				String function = (String) obj.get("FUNCTION");
				switch (function) {
				case "CHECKIDDUPLICATES":
					String result = dbManager.checkIDDuplicates((String) obj.get("ID")) == true ? "Duplicate":"NotDuplicate";
					out.writeObject(result);
					out.flush();
					break;
				case "SIGNUP":
					int a =3;
					JSONObject signUpJson = (JSONObject)obj.get("ACCOUNT");
					String signUpID = (String)signUpJson.get("ID");
					String signUpPW = (String)signUpJson.get("PW");
					Account signUpAccount = new Account(signUpID,signUpPW);
					String signUpResult = dbManager.createNewAccount(signUpAccount)?"ACCOUNT CREATED":"ACCOUNT NOT CREATED";
					out.writeObject(signUpResult);
					out.flush();
					break;
				case "SIGNIN":
					JSONObject signInJson = (JSONObject)obj.get("ACCOUNT");
					String signInID = (String)signInJson.get("ID");
					String signInPW = (String)signInJson.get("PW");
					Account signInAccount = new Account(signInID,signInPW);
					String signInResult = dbManager.logIn(signInAccount)?"LOGIN SUCCESS":"LOGIN FAIL";
					out.writeObject(signInResult);
					out.flush();
					break;
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
